from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import KeyboardButton
from utils.language import languages

class ReplyKb:
    @staticmethod
    async def main_menu(language_code: str = 'ch'):
        translation = languages.get(language_code, languages["en"])

        buttons = [
            translation["buy_account"],
            translation["top_up_balance"],
            translation["change_language"],
            translation["profile"],
            translation["support"],
        ]

        builder = ReplyKeyboardBuilder()
        
        for button in buttons:
            builder.add(KeyboardButton(text=button))

        builder.adjust(2, 2, 1)
        return builder.as_markup(resize_keyboard=True)
    
    @staticmethod
    async def change_language(language_code: str = 'ch'):
        translation = languages.get(language_code, languages["en"])
        buttons = [
            ("üá∫üá∏", "set_lang:en"),
            ("üá∑üá∫", "set_lang:ru"),
            ("üá®üá≥", "set_lang:ch"),
            (translation["cancel"], "cancel"),
        ]

        builder = InlineKeyboardBuilder()
        
        for text, callback_data in buttons:
            builder.button(text=text, callback_data=callback_data)

        return builder.adjust(1).as_markup()

    @staticmethod
    async def adminpanel():
        buttons = [
            ("Add account", "add_doc"),
            ("Add Balance", "change_balance"),
            ("Cancel", "cancel"),
        ]

        builder = InlineKeyboardBuilder()
        
        for text, callback_data in buttons:
            builder.button(text=text, callback_data=callback_data)

        return builder.adjust(1).as_markup()

    @staticmethod
    async def confirmmorend(total_price: int, language_code: str = 'ch'):
        translation = languages.get(language_code, languages["en"])

        buttons = [
            (translation["confirm_purchase"], f"confirm_purchase:{total_price}"),
            (translation["cancel"], "cancel_purchase"),
        ]

        menu = InlineKeyboardBuilder()
        for text, callback_data in buttons:
            menu.button(text=text, callback_data=callback_data)

        return menu.adjust(1).as_markup()
    
    @staticmethod
    async def confirmpaymentbsc(bsc: int, new_balance: float, language_code: str = 'ch'):
        translation = languages.get(language_code, languages["en"])

        buttons = [
            (translation["check_pay"], f"check_pay_bsc:{bsc}%{new_balance}"),
        ]

        menu = InlineKeyboardBuilder()
        for text, callback_data in buttons:
            menu.button(text=text, callback_data=callback_data)

        return menu.adjust(1).as_markup()
    
    @staticmethod
    async def confirmpaymentusdt(usdt: int, new_balance: float, language_code: str = 'ch'):
        translation = languages.get(language_code, languages["en"])

        buttons = [
            (translation["check_pay"], f"check_pay_usdt:{usdt}%{new_balance}"),
        ]

        menu = InlineKeyboardBuilder()
        for text, callback_data in buttons:
            menu.button(text=text, callback_data=callback_data)

        return menu.adjust(1).as_markup()
    
    @staticmethod
    async def confirmpaymentron(trx: int, new_balance: float, language_code: str = 'ch'):
        translation = languages.get(language_code, languages["en"])

        buttons = [
            (translation["check_pay"], f"check_pay_tron:{trx}%{new_balance}"),
        ]

        menu = InlineKeyboardBuilder()
        for text, callback_data in buttons:
            menu.button(text=text, callback_data=callback_data)

        return menu.adjust(1).as_markup()
    
    @staticmethod
    async def buyacctype():
        buttons = [
            ("TDATA", "buy_tdata"),
            ("Session + JSON", "buy_session_json"),
        ]

        menu = InlineKeyboardBuilder()
        
        for text, callback_data in buttons:
            menu.button(text=text, callback_data=callback_data)

        return menu.adjust(1).as_markup()
    
    @staticmethod
    async def addacctype():
        buttons = [
            ("TDATA", "add_tdata"),
            ("Session + JSON", "add_session_json"),
        ]

        menu = InlineKeyboardBuilder()
        
        for text, callback_data in buttons:
            menu.button(text=text, callback_data=callback_data)

        return menu.adjust(1).as_markup()
    
    @staticmethod
    async def select_valuta_kb(balance: int):
        buttons = [
            ("ü™ô USDT", f"add_balance_usdt:{balance}"),
        ]

        menu = InlineKeyboardBuilder()
        
        for text, callback_data in buttons:
            menu.button(text=text, callback_data=callback_data)

        return menu .adjust(1).as_markup()
    
    @staticmethod
    async def generate_sum_keyboard(language_code: str):
        sums = [5, 10, 20, 50, 100, 300, 500, 1000, 2000, 3000, 5000]
        menu = InlineKeyboardBuilder()

        for amount in sums:
            menu.button(
                text=f"üíµ {amount} USDT",
                callback_data=f"select_sum:{amount}"
            )
        
        menu.adjust(2)

        back_button_text = languages.get(language_code, languages["en"])["cancel"]
        menu.button(
            text=f"üîô {back_button_text}",
            callback_data="cancel"
        )

        return menu.adjust(2, 1).as_markup()
    
    @staticmethod
    async def build_region_keyboard(
        country_codes: dict,
        available_regions: set,
        available_stock: dict,
        language_code: str = 'ch',
    ):
        if not isinstance(country_codes, dict):
            raise ValueError("country_codes –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º.")

        region_translations = {
            "en": {
                "ru": "Russia",
                "us": "United States",
                "de": "Germany",
                "fr": "France",
                "cn": "China",
                "jp": "Japan",
                "in": "India",
                "br": "Brazil",
                "gb": "United Kingdom",
                "it": "Italy",
                "es": "Spain",
                "ca": "Canada",
                "au": "Australia",
                "mx": "Mexico",
                "za": "South Africa",
                "kr": "South Korea",
                "ar": "Argentina",
                "sa": "Saudi Arabia",
                "ng": "Nigeria",
                "eg": "Egypt",
                "tr": "Turkey",
                "pk": "Pakistan",
                "id": "Indonesia",
                "pl": "Poland",
                "nl": "Netherlands",
                "se": "Sweden",
                "ch": "Switzerland",
                "be": "Belgium",
                "gr": "Greece",
                "pt": "Portugal",
                "no": "Norway",
                "dk": "Denmark",
                "fi": "Finland",
                "is": "Iceland",
                "ie": "Ireland",
                "sg": "Singapore",
                "ph": "Philippines",
                "th": "Thailand",
                "vn": "Vietnam",
                "my": "Malaysia",
                "ua": "Ukraine",
                "ro": "Romania",
                "bg": "Bulgaria",
                "cz": "Czech Republic",
                "hu": "Hungary",
                "at": "Austria",
                "cl": "Chile",
                "co": "Colombia",
                "pe": "Peru",
                "ve": "Venezuela",
                "cancel": "Cancel",
            },
            "ru": {
                "ru": "–†–æ—Å—Å–∏—è",
                "us": "–°–®–ê",
                "de": "–ì–µ—Ä–º–∞–Ω–∏—è",
                "fr": "–§—Ä–∞–Ω—Ü–∏—è",
                "cn": "–ö–∏—Ç–∞–π",
                "jp": "–Ø–ø–æ–Ω–∏—è",
                "in": "–ò–Ω–¥–∏—è",
                "br": "–ë—Ä–∞–∑–∏–ª–∏—è",
                "gb": "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
                "it": "–ò—Ç–∞–ª–∏—è",
                "es": "–ò—Å–ø–∞–Ω–∏—è",
                "ca": "–ö–∞–Ω–∞–¥–∞",
                "au": "–ê–≤—Å—Ç—Ä–∞–ª–∏—è",
                "mx": "–ú–µ–∫—Å–∏–∫–∞",
                "za": "–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞",
                "kr": "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è",
                "ar": "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞",
                "sa": "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è",
                "ng": "–ù–∏–≥–µ—Ä–∏—è",
                "eg": "–ï–≥–∏–ø–µ—Ç",
                "tr": "–¢—É—Ä—Ü–∏—è",
                "pk": "–ü–∞–∫–∏—Å—Ç–∞–Ω",
                "id": "–ò–Ω–¥–æ–Ω–µ–∑–∏—è",
                "pl": "–ü–æ–ª—å—à–∞",
                "nl": "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
                "se": "–®–≤–µ—Ü–∏—è",
                "ch": "–®–≤–µ–π—Ü–∞—Ä–∏—è",
                "be": "–ë–µ–ª—å–≥–∏—è",
                "gr": "–ì—Ä–µ—Ü–∏—è",
                "pt": "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è",
                "no": "–ù–æ—Ä–≤–µ–≥–∏—è",
                "dk": "–î–∞–Ω–∏—è",
                "fi": "–§–∏–Ω–ª—è–Ω–¥–∏—è",
                "is": "–ò—Å–ª–∞–Ω–¥–∏—è",
                "ie": "–ò—Ä–ª–∞–Ω–¥–∏—è",
                "sg": "–°–∏–Ω–≥–∞–ø—É—Ä",
                "ph": "–§–∏–ª–∏–ø–ø–∏–Ω—ã",
                "th": "–¢–∞–∏–ª–∞–Ω–¥",
                "vn": "–í—å–µ—Ç–Ω–∞–º",
                "my": "–ú–∞–ª–∞–π–∑–∏—è",
                "ua": "–£–∫—Ä–∞–∏–Ω–∞",
                "ro": "–†—É–º—ã–Ω–∏—è",
                "bg": "–ë–æ–ª–≥–∞—Ä–∏—è",
                "cz": "–ß–µ—Ö–∏—è",
                "hu": "–í–µ–Ω–≥—Ä–∏—è",
                "at": "–ê–≤—Å—Ç—Ä–∏—è",
                "cl": "–ß–∏–ª–∏",
                "co": "–ö–æ–ª—É–º–±–∏—è",
                "pe": "–ü–µ—Ä—É",
                "ve": "–í–µ–Ω–µ—Å—É—ç–ª–∞",
                "cancel": "–û—Ç–º–µ–Ω–∞",
            },
            "ch": {
                "ru": "‰øÑÁΩóÊñØ",
                "us": "ÁæéÂõΩ",
                "de": "Âæ∑ÂõΩ",
                "fr": "Ê≥ïÂõΩ",
                "cn": "‰∏≠ÂõΩ",
                "jp": "Êó•Êú¨",
                "in": "Âç∞Â∫¶",
                "br": "Â∑¥Ë•ø",
                "gb": "Ëã±ÂõΩ",
                "it": "ÊÑèÂ§ßÂà©",
                "es": "Ë•øÁè≠Áâô",
                "ca": "Âä†ÊãøÂ§ß",
                "au": "Êæ≥Â§ßÂà©‰∫ö",
                "mx": "Â¢®Ë•øÂì•",
                "za": "ÂçóÈùû",
                "kr": "Èü©ÂõΩ",
                "ar": "ÈòøÊ†πÂª∑",
                "sa": "Ê≤ôÁâπÈòøÊãâ‰ºØ",
                "ng": "Â∞ºÊó•Âà©‰∫ö",
                "eg": "ÂüÉÂèä",
                "tr": "ÂúüËÄ≥ÂÖ∂",
                "pk": "Â∑¥Âü∫ÊñØÂù¶",
                "id": "Âç∞Â∫¶Â∞ºË•ø‰∫ö",
                "pl": "Ê≥¢ÂÖ∞",
                "nl": "Ëç∑ÂÖ∞",
                "se": "ÁëûÂÖ∏",
                "ch": "ÁëûÂ£´",
                "be": "ÊØîÂà©Êó∂",
                "gr": "Â∏åËÖä",
                "pt": "Ëë°ËêÑÁâô",
                "no": "Êå™Â®Å",
                "dk": "‰∏πÈ∫¶",
                "fi": "Ëä¨ÂÖ∞",
                "is": "ÂÜ∞Â≤õ",
                "ie": "Áà±Â∞îÂÖ∞",
                "sg": "Êñ∞Âä†Âù°",
                "ph": "Ëè≤ÂæãÂÆæ",
                "th": "Ê≥∞ÂõΩ",
                "vn": "Ë∂äÂçó",
                "my": "È©¨Êù•Ë•ø‰∫ö",
                "ua": "‰πåÂÖãÂÖ∞",
                "ro": "ÁΩóÈ©¨Â∞º‰∫ö",
                "bg": "‰øùÂä†Âà©‰∫ö",
                "cz": "Êç∑ÂÖã",
                "hu": "ÂåàÁâôÂà©",
                "at": "Â••Âú∞Âà©",
                "cl": "Êô∫Âà©",
                "co": "Âì•‰º¶ÊØî‰∫ö",
                "pe": "ÁßòÈ≤Å",
                "ve": "ÂßîÂÜÖÁëûÊãâ",
                "cancel": "ÂèñÊ∂à",
            },
        }


        translations = region_translations.get(language_code, region_translations["en"])

        builder = InlineKeyboardBuilder()

        for code, region in country_codes.items():
            if region in available_regions:
                stock = available_stock.get(region, 0)
                builder.button(
                    text=f"{translations.get(region, region)} ({code}) - {stock} pcs",
                    callback_data=f"select_region:{region}",
                )

        builder.button(text=translations["cancel"], callback_data="cancel")
        return builder.adjust(3).as_markup()
