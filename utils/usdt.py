import requests
from datetime import datetime

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
WALLET_ADDRESS = 'TKQ4eT1xfJCPt6eV9hBx4b2iEhzwWT18er'
TRX_API_URL = f"https://apilist.tronscanapi.com/api/transfer/trc20?address={WALLET_ADDRESS}&trc20Id=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t&start=0&limit=10&direction=0&reverse=true&db_version=1"
COINGECKO_API_URL = "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=usd"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ USDT/USD
def get_usd_rate(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return float(data["tether"]["usd"])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT/USD: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
def fetch_transactions(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö: {e}")
        return None

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
def format_timestamp(timestamp_ms):
    try:
        timestamp_sec = timestamp_ms / 1000
        return datetime.utcfromtimestamp(timestamp_sec).strftime('%Y-%m-%d %H:%M:%S')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def check_transactions(transactions, target_amount_trx):
    for transaction in transactions:
        try:
            amount_trx = float(transaction.get("amount")) / (10**6)
            print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É {amount_trx}, —Ü–µ–ª–µ–≤–∞—è: {target_amount_trx}")  # Debug
            if abs(amount_trx - target_amount_trx) < 0.001:
                print("üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π!")
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
    return False


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
def display_transactions(transactions, usd_rate):
    for transaction in transactions:
        try:
            amount_trx = float(transaction.get("amount")) / (10**6)
            usd_amount = amount_trx * usd_rate
            readable_date = format_timestamp(transaction.get("block_timestamp"))
            from_address = transaction.get("from")
            to_address = transaction.get("to")
            txn_hash = transaction.get("hash")
            status = transaction.get("contract_ret")
            
            print(f"""–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:
Hash: {txn_hash}
–°—É–º–º–∞ (TRX): {amount_trx}
–°—É–º–º–∞ (USD): {usd_amount:.5f}
–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {from_address}
–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {to_address}
–î–∞—Ç–∞: {readable_date}
–°—Ç–∞—Ç—É—Å: {status}
""")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main(target_usd: float):
    try:
        target_usd = float(target_usd)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float
    except ValueError:
        print(f"–û—à–∏–±–∫–∞: {target_usd} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —á–∏—Å–ª–æ.")
        return
    usd_rate = get_usd_rate(COINGECKO_API_URL)
    if usd_rate is None:
        return

    target_amount_trx = target_usd / usd_rate

    trx_data = fetch_transactions(TRX_API_URL)
    if trx_data is None:
        return

    transactions = trx_data.get("data", [])
    if not transactions:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return

    if check_transactions(transactions, target_amount_trx):
        print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞.")
        return True
    else:
        print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    display_transactions(transactions, usd_rate)

